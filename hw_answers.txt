Questions

1) What is responsible for defining the routes of the games resource?
A) create-router.js file

2) What do you notice about the folder structure? Whats the client responsible for? Whats the server responsible for?
A) Folder structure is divided into client (fron-end) and server (back-end). The client is responsible for displaying read requests and information changes. The server is responsible for the back-end and storing of the data.

3) What are the responsibilities of server.js?
A) server.js is where the server code is built. This enables the server to connect and interact with the database

4) What are the responsibilities of the gamesRouter?
A) Creates a router based on the games collection in the database. The created router will have all the necessary routes for the client to interact with the database and the information held therein

5) What process does the the client (front-end) use to communicate with the server?
A) The client uses the GameService in GameService.js to complete a request-response messaging pattern to interact with the server

6) What optional second argument does the fetch method take? And what is it used for in this application? Hint: See Using Fetch on the MDN docs
A) fetch() takes an 'init' object as the second argument. It is used to determine the route request needed to apply the method requested by the client.

7) Which of the games API routes does the front-end application consume (i.e. make requests to)?
A) router.get("/"), router.post("/"), router.delete("/:id")

8) What are we using the MongoDB Driver for?
A) Allows us to acces and manipulate the data in the database by connecting to the MongoDB

Extension
1) Why do we need to use ObjectId from the MongoDB driver?
A) Because each document requires a unique id